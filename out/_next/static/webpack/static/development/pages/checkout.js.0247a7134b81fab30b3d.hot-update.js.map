{"version":3,"file":"static/webpack/static/development/pages/checkout.js.0247a7134b81fab30b3d.hot-update.js","sources":["webpack:///./pages-sections/checkout-justfit/SectionForm.js"],"sourcesContent":["/*eslint-disable*/\r\nimport React from \"react\";\r\n// nodejs library that concatenates classes\r\nimport classNames from \"classnames\";\r\nimport axios from 'axios';\r\n// @material-ui/core components\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n// @material-ui/icons\r\nimport Mail from \"@material-ui/icons/Mail\";\r\nimport Favorite from \"@material-ui/icons/Favorite\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n// core components\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport Button from \"components/CustomButtons/Button.js\";\r\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\r\nimport Footer from \"components/Footer/Footer.js\";\r\n\r\nimport googleIcon from \"assets/img/google-icon.png\";\r\nimport facebookIcon from \"assets/img/facebook-icon.png\";\r\n\r\nimport styles from \"assets/jss/nextjs-material-kit-pro/pages/justfit/justfit.js\";\r\nimport Justfit from \"../../components/Justfit/justfit\";\r\nimport PlanHorizontal from \"../../components/Justfit/JustfitPlans/PlanHorizontal\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\n// import MaskedInput from 'react-text-mask';\r\nimport InputMask from \"react-input-mask\";\r\n\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers';\r\nimport * as yup from \"yup\";\r\nimport { setLocale } from 'yup';\r\n\r\nimport TagManager from 'react-gtm-module';\r\nimport { bool } from \"prop-types\";\r\n\r\n\r\nsetLocale({  \r\n  mixed: {\r\n    notType: function notType(_ref) {\r\n      switch (_ref.type) {\r\n        case 'number':\r\n          return 'deve ser um número';\r\n        case 'string':\r\n          return 'deve ser um texto';\r\n        default:\r\n          return 'formato errado';\r\n      }\r\n    },\r\n    default: 'é inválido',\r\n    required: 'Desculpe, este campo é obrigatório',\r\n    oneOf: 'deve ser um dos seguintes valores: ${values}',\r\n    notOneOf: 'não pode ser um dos seguintes valores: ${values}',\r\n  },\r\n  string: {\r\n      length: 'deve ter exatamente ${length} caracteres',\r\n      min: 'deve ter pelo menos ${min} caracteres',\r\n      max: 'deve ter no máximo ${max} caracteres',\r\n      email: 'Por favor, informe um e-mail inválido',\r\n      url: 'deve ter um formato de URL válida',\r\n      trim: 'não deve conter espaços no início ou no fim.',\r\n      lowercase: 'deve estar em maiúsculo',\r\n      uppercase: 'deve estar em minúsculo',\r\n  },\r\n  number: {\r\n      min: 'deve ser no mínimo ${min}',\r\n      max: 'deve ser no máximo ${max}',\r\n      lessThan: 'deve ser menor que ${less}',\r\n      moreThan: 'deve ser maior que ${more}',\r\n      notEqual: 'não pode ser igual à ${notEqual}',\r\n      positive: 'deve ser um número posítivo',\r\n      negative: 'deve ser um número negativo',\r\n      integer: 'deve ser um número inteiro',      \r\n  },\r\n      date: {\r\n      min: 'deve ser maior que a data ${min}',\r\n      max: 'deve ser menor que a data ${max}',\r\n  },\r\n      array: {\r\n      min: 'deve ter no mínimo ${min} itens',\r\n      max: 'deve ter no máximo ${max} itens',\r\n  }\r\n});\r\n\r\n\r\nfunction isValidCPF(cpf) {\r\n  if (typeof cpf !== \"string\") return false\r\n  cpf = cpf.replace(/[\\s.-]*/igm, '')\r\n  if (\r\n      !cpf ||\r\n      cpf.length != 11 ||\r\n      cpf == \"00000000000\" ||\r\n      cpf == \"11111111111\" ||\r\n      cpf == \"22222222222\" ||\r\n      cpf == \"33333333333\" ||\r\n      cpf == \"44444444444\" ||\r\n      cpf == \"55555555555\" ||\r\n      cpf == \"66666666666\" ||\r\n      cpf == \"77777777777\" ||\r\n      cpf == \"88888888888\" ||\r\n      cpf == \"99999999999\" \r\n  ) {\r\n      return false\r\n  }\r\n  var soma = 0\r\n  var resto\r\n  for (var i = 1; i <= 9; i++) \r\n      soma = soma + parseInt(cpf.substring(i-1, i)) * (11 - i)\r\n  resto = (soma * 10) % 11\r\n  if ((resto == 10) || (resto == 11))  resto = 0\r\n  if (resto != parseInt(cpf.substring(9, 10)) ) return false\r\n  soma = 0\r\n  for (var i = 1; i <= 10; i++) \r\n      soma = soma + parseInt(cpf.substring(i-1, i)) * (12 - i)\r\n  resto = (soma * 10) % 11\r\n  if ((resto == 10) || (resto == 11))  resto = 0\r\n  if (resto != parseInt(cpf.substring(10, 11) ) ) return false\r\n  return true\r\n}\r\n\r\nfunction isValidPhone(phone){\r\n  return /^(?:(?:\\+|00)?(55)\\s?)?(?:\\(?([1-9][0-9])\\)?\\s?)?(?:((?:9\\d|[2-9])\\d{3})\\-?(\\d{4}))$/.test(phone);\r\n}\r\n\r\nfunction isValidDate(dateString) {\r\n  // return /^((((0?[1-9]|[12]\\d|3[01])[\\.\\-\\/](0?[13578]|1[02])      [\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|[12]\\d|30)[\\.\\-\\/](0?[13456789]|1[012])[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|((0?[1-9]|1\\d|2[0-8])[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?\\d{2}))|(29[\\.\\-\\/]0?2[\\.\\-\\/]((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00)))|(((0[1-9]|[12]\\d|3[01])(0[13578]|1[02])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|[12]\\d|30)(0[13456789]|1[012])((1[6-9]|[2-9]\\d)?\\d{2}))|((0[1-9]|1\\d|2[0-8])02((1[6-9]|[2-9]\\d)?\\d{2}))|(2902((1[6-9]|[2-9]\\d)?(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00)|00))))$/.test(date);\r\n\r\n  // First check for the pattern\r\n  if(!/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString))\r\n  return false;\r\n\r\n  // Parse the date parts to integers\r\n  var parts = dateString.split(\"/\");\r\n  var day = parseInt(parts[0], 10);\r\n  var month = parseInt(parts[1], 10);\r\n  var year = parseInt(parts[2], 10);\r\n\r\n  // Check the ranges of month and year\r\n  if(year < 1000 || year > 3000 || month == 0 || month > 12)\r\n    return false;\r\n\r\n  var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];\r\n\r\n  // Adjust for leap years\r\n  if(year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))\r\n    monthLength[1] = 29;\r\n\r\n  // Check the range of the day\r\n  return day > 0 && day <= monthLength[month - 1];\r\n}\r\n\r\nfunction isMaiorIdade(d1){  \r\n  var parts = d1.split(\"/\");\r\n  var day = parseInt(parts[0], 10);\r\n  var month = parseInt(parts[1], 10);\r\n  var year = parseInt(parts[2], 10);\r\n  // d1 = new Date(month + \"/\" + day + \"/\" + year);\r\n  d1 = new Date(year, month - 1, day);\r\n  var d2 = new Date();\r\n  var diff = d2.getTime() - d1.getTime();\r\n  var idade = Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));\r\n  if(idade >= 18){\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nyup.addMethod(yup.string, \"cpf\", function(message) {\r\n\t// return yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => cpfValidate(value));\r\n\treturn yup.mixed().test(\"cpf\", message || \"número de CPF inválido\", value => isValidCPF(value));\r\n});\r\n\r\nyup.addMethod(yup.string, \"phone\", function(message) {\t\r\n\treturn yup.mixed().test(\"phone\", message || \"número de celular inválido\", value => isValidPhone(value));\r\n});\r\n\r\nyup.addMethod(yup.string, \"dateNasc\", function(message) {\t\r\n  return yup.mixed().test(\"dateNasc\", message || \"Por favor, digite uma data válida\", value => isValidDate(value));  \r\n});\r\n\r\n\r\nconst SignupSchema = yup.object().shape({  \r\n  cpf: yup\r\n    .string()\r\n    .cpf(\"Por favor, informe um CPF válido\"),  \r\n  firstName: yup\r\n    .string()\r\n    .required(),  \r\n  lastName: yup\r\n    .string()\r\n    .required(),  \r\n  sex: yup\r\n    .string()\r\n    .required(),  \r\n  email: yup\r\n    .string()\r\n    .required()    \r\n    .email(),  \r\n  phone: yup\r\n    .string()\r\n    .phone(\"Por favor, informe um número de celular válido\"),  \r\n  birthDate: yup   \r\n    .string()   \r\n    .dateNasc()\r\n    .test('maiorIdade', 'Para continuar, você deve ter no mínimo 18 anos', \r\n      function(value) {\r\n          return isMaiorIdade(value);\r\n      }),        \r\n  \r\n  optinPhone: yup.bool().oneOf([true], 'O aceite dos termos é obrigatório'),    \r\n  optinEmail: yup.bool().oneOf([true], 'O aceite dos termos é obrigatório'),    \r\n\r\n});\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function SectionForm(props) {\r\n  const [showError, setShowError] = React.useState(false);\r\n  const [messageReturn, setMessageReturn] = React.useState({\r\n    code: \"000\",\r\n    msg: \"Erro ao enviar dados. Tente mais tarde\"\r\n  })\r\n  const classes = useStyles();\r\n\r\n\r\n  const { register, trigger, control, getValues, errors } = useForm({\r\n    resolver: yupResolver(SignupSchema),\r\n    mode: \"onBlur\"    \r\n  });\r\n\r\n\r\n  React.useEffect( () => {\r\n    if(props.validationForm){            \r\n      validateForm();       \r\n      props.setIsLoading(true);\r\n      props.setValidationForm(false);      \r\n    }            \r\n  }, [props.validationForm]);\r\n\r\n  const validateForm = async () => {\r\n    // var result = await trigger();\r\n\r\n    \r\n    // var result = await trigger([ \"name\", \"email\", \"cpf\", \"sex\", \"birthDate\", \"phone\" ]);\r\n    var result = await trigger();\r\n    if(result){\r\n\r\n      var identificationForm = getValues();\r\n      console.log(\"identificationForm\");    \r\n      console.log(identificationForm);    \r\n\r\n      var resultCpf = await validateCpf(identificationForm.cpf);\r\n      console.log(\"resultCpf\");\r\n      console.log(resultCpf);\r\n      if(resultCpf){\r\n        var resultEmail = await validateEmail(identificationForm.email);\r\n        console.log(\"resultEmail\");\r\n        console.log(resultEmail);\r\n        if(resultEmail){          \r\n\r\n          props.setDataSale( prevDataSale => {\r\n            return {  \r\n              customer: { \r\n                ...prevDataSale.customer,\r\n                name: identificationForm.firstName.toUpperCase(),\r\n                email: identificationForm.email,\r\n                document: identificationForm.cpf.replace(/[^\\d]+/g,''),   \r\n                sex: identificationForm.sex,\r\n                birthDate: identificationForm.birthDate,\r\n                financeResponsible: {\r\n                  ...prevDataSale.customer.financeResponsible,\r\n                  name: identificationForm.firstName.toUpperCase(),\r\n                  document: identificationForm.cpf.replace(/[^\\d]+/g,''), \r\n                  email: identificationForm.email,\r\n                  phone: identificationForm.phone.replace(/\\s+/g, '')                                  \r\n                }, \r\n                phones: [\r\n                  {\r\n                    type: \"cellphone\",\r\n                    number: identificationForm.phone.replace(/\\s+/g, ''),  \r\n                  }\r\n                ],                               \r\n              }               \r\n            }\r\n          });  \r\n\r\n          props.setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n        }\r\n      }\r\n\r\n    }\r\n    props.setIsLoading(false);\r\n    console.log(result);    \r\n  }\r\n  \r\n  // const validateCpf = async (cpf) => {    \r\n  async function validateCpf(cpf) {    \r\n\r\n    let result = false;\r\n    result = await axios.post(`https://admin.justfit.com.br/app.justfit/api/LoadPersonalOnline/isValidaCpf?cpf=${cpf}`)\r\n      .then(res => {\r\n        console.log(res);        \r\n        if(res.data.code !== \"0\"){   \r\n          setMessageReturn( prev => {\r\n            return {\r\n              code: res.data.code,\r\n              msg: res.data.msg\r\n            }\r\n          });       \r\n          setShowError(true);\r\n          return false;\r\n        } else {          \r\n          return true;\r\n        }\r\n        \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setShowError(true);\r\n        return false;\r\n      })\r\n      return result;\r\n  };\r\n  \r\n  async function validateEmail(email) {      \r\n    let result = false;\r\n    result = await axios.post(`https://admin.justfit.com.br/app.justfit/api/LoadPersonalOnline/GetByEmail?email=${email}`)\r\n      .then(res => {\r\n        console.log(res);\r\n        if(res.data.code !== \"0\"){\r\n          setMessageReturn( prev => {\r\n            return {\r\n              code: res.data.code,\r\n              msg: res.data.msg\r\n            }\r\n          });  \r\n          setShowError(true);\r\n\r\n          return false;\r\n        } else {          \r\n          return true;\r\n        }\r\n        \r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setShowError(true);\r\n        return false;\r\n      })\r\n      return result;\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setShowError(false);\r\n  };\r\n\r\n\r\n  return (\r\n      \r\n      <GridContainer className={classes.content} justify=\"center\" align='center' >        \r\n        <Snackbar open={showError} autoHideDuration={6000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity=\"error\">\r\n            {messageReturn.msg}\r\n          </Alert>\r\n        </Snackbar>\r\n        <GridItem xs={12} sm={10} md={10} >\r\n          <Justfit\r\n            theme=\"white\"\r\n            className={classes.jusfit}\r\n          >\r\n          <GridContainer justify='center' align='left'>\r\n            <GridItem xs={10} sm={10} md={10} style={{marginBottom:'40px'}}>\r\n            {/* <h1 style={{fontSize:'40px',fontWeight:600,color:\"#484848\",maxWidth:'500px'}}>FAÇA LOGIN PARA CONTINUAR</h1> */}\r\n            <h1 style={{fontSize:'40px',fontWeight:600,color:\"#484848\",maxWidth:'500px'}}>IDENTIFIQUE-SE PARA CONTINUAR</h1>\r\n            </GridItem>\r\n\r\n            {/* <GridItem xs={11} sm={11} md={11}>              \r\n\r\n              <GridContainer justify='left' align='left'>\r\n                <GridItem xs={12} sm={12} md={12} >\r\n                  <GridContainer justify='center'>\r\n                    <GridItem xs={12} sm={12} md={5} >\r\n                      <button className={classes.btnFacebook}>\r\n                      <img src={facebookIcon} />\r\n                          <h2>LOGAR COM FACEBOOK</h2>\r\n                      </button>\r\n                    </GridItem>\r\n                    <GridItem xs={12} sm={12} md={1} className={classes.divOu}>\r\n                      <h2 style={{fontSize:'15px',fontWeight:400,color:'#D8D8D8'}}>ou</h2>\r\n                    </GridItem>\r\n                    <GridItem xs={12} sm={12} md={5}>\r\n                      <button className={classes.btnGoogle} style={{backgroundColor:'#f2f2f2'}}>\r\n                          <img src={googleIcon}  />\r\n                          <h2>LOGIN COM GOOGLE</h2>\r\n                      </button>\r\n                    </GridItem>\r\n                  </GridContainer>\r\n                </GridItem>\r\n\r\n              </GridContainer>\r\n\r\n            </GridItem> */}\r\n\r\n            \r\n\r\n            <GridItem xs={12} sm={12} md={12} style={{marginBottom:'20px'}}>\r\n            <GridContainer justify='center'>\r\n              <GridItem xs={10} sm={10} md={10}> \r\n                  {/* <h5 style={{color:\"#484848\",fontSize:'15px',fontWeight:600,paddingTop:'50px',}}>Preencha os campos abaixo para se cadastrar</h5> */}\r\n                  <h5 style={{color:\"#484848\",fontSize:'15px',fontWeight:600,paddingTop:'0px',}}>Preencha os campos abaixo para se cadastrar</h5>\r\n              </GridItem>\r\n\r\n              \r\n\r\n              <GridContainer justify='left' xs={10} sm={10} md={10} >\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.firstName ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2 >Nome</h2>\r\n                    <input ref={register} name=\"firstName\" id=\"firstName\"></input>                      \r\n                    { errors.firstName && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.firstName.message}</label></span>                      \r\n                      )\r\n                    }\r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.lastName ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>Sobrenome</h2>\r\n                    <input ref={register} name=\"lastName\" id=\"lastName\"></input>\r\n                    { errors.lastName && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.lastName.message}</label></span>                      \r\n                      )\r\n                    }\r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={12} className={ errors.email ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>E-mail</h2>                  \r\n                    <input name=\"email\" id=\"email\" type=\"email\" ref={register}></input>                      \r\n                    { errors.email && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.email.message}</label></span>                      \r\n                      )\r\n                    } \r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.cpf ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>CPF</h2>                    \r\n                    <Controller                      \r\n                      \r\n                      as={InputMask}\r\n                      control={control}\r\n                      mask=\"999.999.999-99\"\r\n                      name=\"cpf\"     \r\n                      type=\"tel\"     \r\n                      defaultValue={\"\"}                                                                     \r\n                                        \r\n                    />                   \r\n                    { errors.cpf && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.cpf.message}</label></span>                      \r\n                      )\r\n                    } \r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.sex ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>Sexo</h2>\r\n                    {/* <input ref={register} name=\"sex\" id=\"sex\"></input>                       */}\r\n                    <select name=\"sex\" id=\"sex\" ref={register}>\r\n                      <option value=\"M\">Masculino</option>\r\n                      <option value=\"F\">Feminino</option>                      \r\n                    </select>\r\n                    { errors.sex && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.sex.message}</label></span>                      \r\n                      )\r\n                    } \r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.birthDate ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>Data de nascimento</h2>\r\n                    {/* <input ref={register} name=\"birthDate\" id=\"birthDate\"></input>                       */}\r\n                    <Controller\r\n                      as={InputMask}\r\n                      control={control}\r\n                      mask=\"99/99/9999\"\r\n                      name=\"birthDate\"\r\n                      type=\"tel\"\r\n                      defaultValue={\"\"}\r\n                      // onClick={(event) => {                        \r\n                      //   event.target.select();                    \r\n                      // }}\r\n                    />\r\n                    { errors.birthDate && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.birthDate.message}</label></span>                      \r\n                      )\r\n                    }                 \r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={6} className={ errors.phone ? classes.formInputItem + \" \" + classes.formInputItemError : classes.formInputItem }>\r\n                    <h2>Celular</h2>                    \r\n\r\n                    <Controller\r\n                      as={InputMask}\r\n                      control={control}\r\n                      mask=\"(99) 99999-9999\"\r\n                      name=\"phone\"\r\n                      type=\"tel\"\r\n                      defaultValue={\"\"}\r\n                    />\r\n\r\n                    { errors.phone && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.phone.message}</label></span>                      \r\n                      )\r\n                    } \r\n                  </GridItem>\r\n              </GridContainer>\r\n                  <GridItem xs={12} sm={12} md={10} className={classes.checkboxItem} style={{ marginTop: \"25px\" }}>\r\n                    <div style={{display: 'flex', flexDirection: 'row', alignItems:'center',margin:0,padding:0}}>\r\n                    <label className={classes.containerCheckboxT}>\r\n                        <input type='checkbox' name=\"optinPhone\" ref={register}></input>\r\n                        <span className={classes.checkmarkT}  ></span>\r\n                      </label>\r\n                    <h2>Aceito receber notícias e comunicados da JustFit por SMS, Whatsapp e Ligação.</h2>\r\n                    </div>\r\n                    { errors.optinPhone && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.optinPhone.message}</label></span>                      \r\n                      )\r\n                    }                     \r\n                  </GridItem>\r\n                  <GridItem xs={12} sm={12} md={10} className={classes.checkboxItem}>\r\n                    <div style={{display: 'flex', flexDirection: 'row', alignItems:'center',margin:0,padding:0}}>\r\n                            <label className={classes.containerCheckboxT}>\r\n                        <input type='checkbox' name=\"optinEmail\" ref={register}></input>\r\n                        <span className={classes.checkmarkT}  ></span>\r\n                      </label>\r\n                    <h2>Aceito receber notícias e comunicados da JustFit por Newsletter.</h2>\r\n                    </div>\r\n                    { errors.optinEmail && (                      \r\n                      <span><ErrorOutlineIcon/><label>{errors.optinEmail.message}</label></span>                      \r\n                      )\r\n                    } \r\n                  </GridItem>              \r\n            </GridContainer>\r\n          </GridItem>\r\n\r\n          </GridContainer>\r\n          \r\n          </Justfit>\r\n        \r\n        </GridItem>\r\n      </GridContainer>\r\n      \r\n       \r\n      \r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AAdA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAzCA;AACA;AA+CA;AACA;AACA;AACA;AAAA;AAcA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAGA;AAGA;AAGA;AAGA;AAIA;AAGA;AAKA;AACA;AAEA;AACA;AA7BA;AACA;AAgCA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAFA;AAFA;AAAA;AAAA;AACA;AAKA;AACA;AAPA;AAUA;AACA;AAFA;AATA;AAAA;AAAA;AAAA;AAAA;AACA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAVA;AAAA;AACA;AADA;AAYA;AACA;AACA;AACA;AAfA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAgBA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AAEA;AACA;AAFA;AAfA;AADA;AAuBA;AAEA;AAAA;AAAA;AACA;AACA;AAjDA;AAoDA;AACA;AACA;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAuDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAzBA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAzBA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgiBA;;;;A","sourceRoot":""}
{"version":3,"file":"index.umd.min.js","sources":["../src/yup.ts","../src/utils/convertArrayToPathName.ts","../src/superstruct.ts","../src/joi.ts"],"sourcesContent":["import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Yup from 'yup';\n\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.inner)\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => ({\n          ...previous,\n          ...(path\n            ? previous[path] && validateAllFieldCriteria\n              ? {\n                  [path]: appendErrors(\n                    path,\n                    validateAllFieldCriteria,\n                    previous,\n                    type,\n                    message,\n                  ),\n                }\n              : {\n                  [path]: previous[path] || {\n                    message,\n                    type,\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: { [type]: message || true },\n                        }\n                      : {}),\n                  },\n                }\n            : {}),\n        }),\n        {},\n      )\n    : {\n        [error.path]: { message: error.message, type: error.type },\n      };\n\nexport const yupResolver = <TFieldValues extends Record<string, any>>(\n  schema: Yup.ObjectSchema,\n  options: Yup.ValidateOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: (await schema.validate(values, {\n        ...options,\n      })) as any,\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","export default (paths: (string | number)[]): string =>\n  paths\n    .reduce(\n      (previous, path: string | number, index): string =>\n        `${previous}${\n          typeof path === 'string'\n            ? `${index > 0 ? '.' : ''}${path}`\n            : `[${path}]`\n        }`,\n      '',\n    )\n    .toString();\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Superstruct from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Superstruct.StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.failures)\n    ? error.failures.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type || '',\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type || '']: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const superstructResolver = <TFieldValues extends Record<string, any>>(\n  schema: Superstruct.Struct,\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: schema(values),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Joi from '@hapi/joi';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Joi.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.details)\n    ? error.details.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type,\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const joiResolver = <TFieldValues extends Record<string, any>>(\n  schema: Joi.Schema,\n  options: Joi.AsyncValidationOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, {\n        ...options,\n      }),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","inner","reduce","previous","path","message","type","[object Object]","appendErrors","types","paths","index","toString","failures","currentPath","convertArrayToPathName","details","schema","options","abortEarly","async","values","_","validateAsync","errors","e","transformToNestObject","validate"],"mappings":"mRAGA,MAAMA,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMI,OAChBJ,EAAMI,MAAMC,OACV,CAACC,GAAiCC,KAAAA,EAAMC,QAAAA,EAASC,KAAAA,oCAC5CH,GACCC,EACAD,EAASC,IAASN,EAChB,CACES,CAACH,GAAOI,eACNJ,EACAN,EACAK,EACAG,EACAD,IAGJ,CACEE,CAACH,GAAOD,EAASC,mBACfC,QAAAA,EACAC,KAAAA,GACIR,EACA,CACEW,MAAO,CAAEF,CAACD,GAAOD,IAAW,IAE9B,KAGV,IAEN,IAEF,CACEE,CAACV,EAAMO,MAAO,CAAEC,QAASR,EAAMQ,QAASC,KAAMT,EAAMS,aCtC5CI,GACdA,EACGR,OACC,CAACC,EAAUC,EAAuBO,IAChC,GAAGR,IACe,iBAATC,EACH,GAAGO,EAAQ,EAAI,IAAM,KAAKP,IAC1B,IAAIA,OAEZ,IAEDQ,WCPL,MAAMhB,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMgB,UAChBhB,EAAMgB,SAASX,OACb,CAACC,GAAiCC,KAAAA,EAAMC,QAAAA,EAAU,GAAIC,KAAAA,MACpD,MAAMQ,EAAcC,EAAuBX,GAE3C,sCACKD,GACCC,EACAD,EAASW,IAAgBhB,EACvB,CACES,CAACO,GAAcN,eACbM,EACAhB,EACAK,EACAG,GAAQ,GACRD,IAGJ,CACEE,CAACO,GAAcX,EAASW,mBACtBT,QAAAA,EACAC,KAAAA,GACIR,EACA,CACEW,MAAO,CAAEF,CAACD,GAAQ,IAAKD,IAAW,IAEpC,KAGV,KAGR,IAEF,GCtCAT,EAAmB,CACvBC,EACAC,IAEAC,MAAMC,QAAQH,EAAMmB,SAChBnB,EAAMmB,QAAQd,OACZ,CAACC,GAAiCC,KAAAA,EAAMC,QAAAA,EAAU,GAAIC,KAAAA,MACpD,MAAMQ,EAAcC,EAAuBX,GAE3C,sCACKD,GACCC,EACAD,EAASW,IAAgBhB,EACvB,CACES,CAACO,GAAcN,eACbM,EACAhB,EACAK,EACAG,EACAD,IAGJ,CACEE,CAACO,GAAcX,EAASW,mBACtBT,QAAAA,EACAC,KAAAA,GACIR,EACA,CACEW,MAAO,CAAEF,CAACD,GAAOD,IAAW,IAE9B,KAGV,KAGR,IAEF,iBAEqB,CACzBY,EACAC,EAAsC,CACpCC,YAAY,KAEaC,MAC3BC,EACAC,EACAxB,GAA2B,KAE3B,IACE,MAAO,CACLuB,aAAcJ,EAAOM,cAAcF,mBAC9BH,IAELM,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,wBACN9B,EAAiB6B,EAAG3B,6BDpB1BmB,GAC2BG,MAC3BC,EACAC,EACAxB,GAA2B,KAE3B,IACE,MAAO,CACLuB,OAAQJ,EAAOI,GACfG,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,wBACN9B,EAAiB6B,EAAG3B,qBFnBD,CACzBmB,EACAC,EAA+B,CAC7BC,YAAY,KAEaC,MAC3BC,EACAC,EACAxB,GAA2B,KAE3B,IACE,MAAO,CACLuB,aAAeJ,EAAOU,SAASN,mBAC1BH,IAELM,OAAQ,IAEV,MAAOC,GACP,MAAO,CACLJ,OAAQ,GACRG,OAAQE,wBACN9B,EAAiB6B,EAAG3B"}
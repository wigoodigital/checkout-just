{"version":3,"file":"index.js","sources":["../src/yup.ts","../src/utils/convertArrayToPathName.ts","../src/superstruct.ts","../src/joi.ts"],"sourcesContent":["import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Yup from 'yup';\n\nconst parseErrorSchema = (\n  error: Yup.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.inner)\n    ? error.inner.reduce(\n        (previous: Record<string, any>, { path, message, type }) => ({\n          ...previous,\n          ...(path\n            ? previous[path] && validateAllFieldCriteria\n              ? {\n                  [path]: appendErrors(\n                    path,\n                    validateAllFieldCriteria,\n                    previous,\n                    type,\n                    message,\n                  ),\n                }\n              : {\n                  [path]: previous[path] || {\n                    message,\n                    type,\n                    ...(validateAllFieldCriteria\n                      ? {\n                          types: { [type]: message || true },\n                        }\n                      : {}),\n                  },\n                }\n            : {}),\n        }),\n        {},\n      )\n    : {\n        [error.path]: { message: error.message, type: error.type },\n      };\n\nexport const yupResolver = <TFieldValues extends Record<string, any>>(\n  schema: Yup.ObjectSchema,\n  options: Yup.ValidateOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: (await schema.validate(values, {\n        ...options,\n      })) as any,\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","export default (paths: (string | number)[]): string =>\n  paths\n    .reduce(\n      (previous, path: string | number, index): string =>\n        `${previous}${\n          typeof path === 'string'\n            ? `${index > 0 ? '.' : ''}${path}`\n            : `[${path}]`\n        }`,\n      '',\n    )\n    .toString();\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Superstruct from 'superstruct';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Superstruct.StructError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.failures)\n    ? error.failures.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type || '',\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type || '']: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const superstructResolver = <TFieldValues extends Record<string, any>>(\n  schema: Superstruct.Struct,\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: schema(values),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n","import { appendErrors, transformToNestObject, Resolver } from 'react-hook-form';\nimport Joi from '@hapi/joi';\nimport convertArrayToPathName from './utils/convertArrayToPathName';\n\nconst parseErrorSchema = (\n  error: Joi.ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  Array.isArray(error.details)\n    ? error.details.reduce(\n        (previous: Record<string, any>, { path, message = '', type }) => {\n          const currentPath = convertArrayToPathName(path);\n\n          return {\n            ...previous,\n            ...(path\n              ? previous[currentPath] && validateAllFieldCriteria\n                ? {\n                    [currentPath]: appendErrors(\n                      currentPath,\n                      validateAllFieldCriteria,\n                      previous,\n                      type,\n                      message,\n                    ),\n                  }\n                : {\n                    [currentPath]: previous[currentPath] || {\n                      message,\n                      type,\n                      ...(validateAllFieldCriteria\n                        ? {\n                            types: { [type]: message || true },\n                          }\n                        : {}),\n                    },\n                  }\n              : {}),\n          };\n        },\n        {},\n      )\n    : [];\n\nexport const joiResolver = <TFieldValues extends Record<string, any>>(\n  schema: Joi.Schema,\n  options: Joi.AsyncValidationOptions = {\n    abortEarly: false,\n  },\n): Resolver<TFieldValues> => async (\n  values,\n  _,\n  validateAllFieldCriteria = false,\n) => {\n  try {\n    return {\n      values: await schema.validateAsync(values, {\n        ...options,\n      }),\n      errors: {},\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(\n        parseErrorSchema(e, validateAllFieldCriteria),\n      ),\n    };\n  }\n};\n"],"names":["appendErrors","transformToNestObject","parseErrorSchema"],"mappings":"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"}